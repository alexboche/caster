# NatLink macro definitions for NaturallySpeaking
# coding: latin-1
# Generated by vcl2py 2.8.6, Sat Dec 22 17:06:02 2018

import natlink
from natlinkutils import *
from VocolaUtils import *


class ThisGrammar(GrammarBase):

    gramSpec = """
        <dgndictation> imported;
        <key> = ('alpha' | 'bravo' | 'charlie' | 'delta' | 'echo' | 'foxtrot' | 'golf' | 'hotel' | 'india' | 'juliett' | 'kilo' | 'lima' | 'mike' | 'november' | 'oscar' | 'papa' | 'quebec' | 'romeo' | 'sierra' | 'tango' | 'uniform' | 'victor' | 'whiskey' | 'xray' | 'yankee' | 'zulu' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '!' | '@' | '#' | '$' | '%' | '^' | '&' | '*' | '(' | ')' | '`' | '~' | '-' | '_' | '=' | '+' | '\\' | '|' | '[' | '{' | ']' | '}' | ';' | ':' | "'" | '"' | ',' | '<' | '.' | '>' | '/' | '?' | 'Left' | 'Right' | 'Up' | 'Down' | 'space-bar' | 'tab-key' | 'Enter' | 'page-up' | 'page-down' | 'Backspace' | 'delete' | 'Escape' | 'Home' | 'End' ) ;
        <1> = 'Press' <key> ;
        <2> = <key> 'Here' ;
        <3> = 'Space Bar' ;
        <4> = 'Tab Key' ;
        <special> = ('Left' | 'Right' | 'Up' | 'Down' | 'space' | 'tab-key' | 'Enter' | 'page-up' | 'page-down' | 'Backspace' | 'delete' | 'escape' ) ;
        <mod> = 'Shift' | 'control -key' | 'control' | 'Alt' ;
        <nn> = ('one' | 'two' | 'three' | 'four' | 'five' | 'six' | 'seven' | 'eight' | 'nine' | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 | 42 | 43 | 44 | 45 | 46 | 47 | 48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 58 | 59 | 60 | 61 | 62 | 63 | 64 | 65 | 66 | 67 | 68 | 69 | 70 | 71 | 72 | 73 | 74 | 75 | 76 | 77 | 78 | 79 | 80 | 81 | 82 | 83 | 84 | 85 | 86 | 87 | 88 | 89 | 90 | 91 | 92 | 93 | 94 | 95 | 96 | 97 | 98 | 99) ;
        <5> = 'Press' <special> <nn> ;
        <66> = (('Left' | 'Right' | 'Up' | 'Down' | 'space' | 'tab-key' | 'Enter' | 'page-up' | 'page-down' | 'Backspace' | 'delete' | 'escape' ) ) <nn> ;
        <6> = 'Press' <mod> <key> <nn> ;
        <67> = ('Shift' | 'control -key' | 'control' | 'Alt' ) <key> <nn> ;
        <7> = 'Press' <mod> <mod> <key> <nn> ;
        <68> = ('Shift' | 'control -key' | 'control' | 'Alt' ) <mod> <key> <nn> ;
        <8> = 'Press' <mod> <mod> <mod> <key> <nn> ;
        <69> = ('Shift' | 'control -key' | 'control' | 'Alt' ) <mod> <mod> <key> <nn> ;
        <9> = 'add subspecialty' ;
        <10> = 'add subspecialty' ('one' | 'two' | 'three' | 'four' | 'five' | 'six' | 'seven' | 'eight' | 'nine' | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30) ;
        <11> = 'heard word' ;
        <12> = 'Google that' ;
        <70> = 'Google' ;
        <13> = 'tray icon' ('zero' | 'one' | 'two' | 'three' | 'four' | 'five' | 'six' | 'seven' | 'eight' | 'nine') ;
        <72> = 'tray icon' ;
        <71> = 'tray' ('zero' | 'one' | 'two' | 'three' | 'four' | 'five' | 'six' | 'seven' | 'eight' | 'nine') ;
        <73> = 'tray' ;
        <14> = ('sloop' | 'sleep' ) ;
        <15> = 'command mode' ;
        <16> = 'sleep Windows' ;
        <17> = ('flags' | 'circles' | 'sirk' | 'numbers' ) ;
        <18> = 'cush' <dgndictation> ;
        <74> = 'cush' ;
        <19> = 'sush' <dgndictation> ;
        <75> = 'sush' ;
        <20> = 'mick' ;
        <21> = 'dick' ;
        <22> = 'rick' ;
        <23> = 'space' ;
        <24> = 'save' ;
        <25> = 'fully kill' ;
        <76> = 'kill' ;
        <26> = 'next jack' ('one' | 'two' | 'three' | 'four' | 'five' | 'six' | 'seven' | 'eight' | 'nine') ;
        <77> = 'jack' ('one' | 'two' | 'three' | 'four' | 'five' | 'six' | 'seven' | 'eight' | 'nine') ;
        <27> = ('ant' | 'enter' ) ('one' | 'two' | 'three' | 'four' | 'five' | 'six' | 'seven' | 'eight' | 'nine') ;
        <28> = 'semi' ;
        <29> = 'sosh' <dgndictation> ;
        <78> = 'sosh' ;
        <30> = 'shsh' ;
        <31> = 'ss' ;
        <32> = 'pounce' <dgndictation> ;
        <33> = 'new tab' ;
        <34> = 'clipboard' ;
        <35> = 'clip' ('one' | 'two' | 'three' | 'four' | 'five' | 'six' | 'seven' | 'eight' | 'nine') ;
        <36> = ('teb' | 'tab' ) ('one' | 'two' | 'three' | 'four' | 'five' | 'six' | 'seven' | 'eight' | 'nine') ;
        <37> = ('escape' | 'Eck' ) ;
        <38> = 'end' ;
        <39> = 'tome' ;
        <40> = 'smack' ('one' | 'two' | 'three' | 'four' | 'five' | 'six' | 'seven' | 'eight' | 'nine') <dgndictation> ;
        <80> = 'smack' ('one' | 'two' | 'three' | 'four' | 'five' | 'six' | 'seven' | 'eight' | 'nine') ;
        <79> = 'smack' <dgndictation> ;
        <81> = 'smack' ;
        <41> = 'jack' ('one' | 'two' | 'three' | 'four' | 'five' | 'six' | 'seven' | 'eight' | 'nine') <dgndictation> ;
        <83> = 'jack' ('one' | 'two' | 'three' | 'four' | 'five' | 'six' | 'seven' | 'eight' | 'nine') ;
        <82> = 'jack' <dgndictation> ;
        <84> = 'jack' ;
        <42> = 'brack' ('one' | 'two' | 'three' | 'four' | 'five' | 'six' | 'seven' | 'eight' | 'nine') <dgndictation> ;
        <86> = 'brack' ('one' | 'two' | 'three' | 'four' | 'five' | 'six' | 'seven' | 'eight' | 'nine') ;
        <85> = 'brack' <dgndictation> ;
        <87> = 'brack' ;
        <43> = 'frack' ('one' | 'two' | 'three' | 'four' | 'five' | 'six' | 'seven' | 'eight' | 'nine') <dgndictation> ;
        <89> = 'frack' ('one' | 'two' | 'three' | 'four' | 'five' | 'six' | 'seven' | 'eight' | 'nine') ;
        <88> = 'frack' <dgndictation> ;
        <90> = 'frack' ;
        <44> = 'spack' ('one' | 'two' | 'three' | 'four' | 'five' | 'six' | 'seven' | 'eight' | 'nine') <dgndictation> ;
        <91> = 'spack' ('one' | 'two' | 'three' | 'four' | 'five' | 'six' | 'seven' | 'eight' | 'nine') ;
        <45> = 'del' ('one' | 'two' | 'three' | 'four' | 'five' | 'six' | 'seven' | 'eight' | 'nine') <dgndictation> ;
        <93> = 'del' ('one' | 'two' | 'three' | 'four' | 'five' | 'six' | 'seven' | 'eight' | 'nine') ;
        <92> = 'del' <dgndictation> ;
        <94> = 'del' ;
        <46> = 'lor' ('one' | 'two' | 'three' | 'four' | 'five' | 'six' | 'seven' | 'eight' | 'nine' | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 | 42 | 43 | 44 | 45 | 46 | 47 | 48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 58 | 59 | 60 | 61 | 62 | 63 | 64 | 65 | 66 | 67 | 68 | 69 | 70 | 71 | 72 | 73 | 74 | 75 | 76 | 77 | 78 | 79 | 80 | 81 | 82 | 83 | 84 | 85 | 86 | 87 | 88 | 89 | 90 | 91 | 92 | 93 | 94 | 95 | 96 | 97 | 98 | 99 | 100) <dgndictation> ;
        <96> = 'lor' ('one' | 'two' | 'three' | 'four' | 'five' | 'six' | 'seven' | 'eight' | 'nine' | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 | 42 | 43 | 44 | 45 | 46 | 47 | 48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 58 | 59 | 60 | 61 | 62 | 63 | 64 | 65 | 66 | 67 | 68 | 69 | 70 | 71 | 72 | 73 | 74 | 75 | 76 | 77 | 78 | 79 | 80 | 81 | 82 | 83 | 84 | 85 | 86 | 87 | 88 | 89 | 90 | 91 | 92 | 93 | 94 | 95 | 96 | 97 | 98 | 99 | 100) ;
        <95> = 'lor' <dgndictation> ;
        <97> = 'lor' ;
        <47> = 'ror' ('one' | 'two' | 'three' | 'four' | 'five' | 'six' | 'seven' | 'eight' | 'nine' | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 | 42 | 43 | 44 | 45 | 46 | 47 | 48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 58 | 59 | 60 | 61 | 62 | 63 | 64 | 65 | 66 | 67 | 68 | 69 | 70 | 71 | 72 | 73 | 74 | 75 | 76 | 77 | 78 | 79 | 80 | 81 | 82 | 83 | 84 | 85 | 86 | 87 | 88 | 89 | 90 | 91 | 92 | 93 | 94 | 95 | 96 | 97 | 98 | 99 | 100) <dgndictation> ;
        <99> = 'ror' ('one' | 'two' | 'three' | 'four' | 'five' | 'six' | 'seven' | 'eight' | 'nine' | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 | 42 | 43 | 44 | 45 | 46 | 47 | 48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 58 | 59 | 60 | 61 | 62 | 63 | 64 | 65 | 66 | 67 | 68 | 69 | 70 | 71 | 72 | 73 | 74 | 75 | 76 | 77 | 78 | 79 | 80 | 81 | 82 | 83 | 84 | 85 | 86 | 87 | 88 | 89 | 90 | 91 | 92 | 93 | 94 | 95 | 96 | 97 | 98 | 99 | 100) ;
        <98> = 'ror' <dgndictation> ;
        <100> = 'ror' ;
        <48> = 'slor' ('one' | 'two' | 'three' | 'four' | 'five' | 'six' | 'seven' | 'eight' | 'nine' | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 | 42 | 43 | 44 | 45 | 46 | 47 | 48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 58 | 59 | 60 | 61 | 62 | 63 | 64 | 65 | 66 | 67 | 68 | 69 | 70 | 71 | 72 | 73 | 74 | 75 | 76 | 77 | 78 | 79 | 80 | 81 | 82 | 83 | 84 | 85 | 86 | 87 | 88 | 89 | 90 | 91 | 92 | 93 | 94 | 95 | 96 | 97 | 98 | 99 | 100) ;
        <101> = 'slor' ;
        <49> = 'jor' ('one' | 'two' | 'three' | 'four' | 'five' | 'six' | 'seven' | 'eight' | 'nine' | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 | 42 | 43 | 44 | 45 | 46 | 47 | 48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 58 | 59 | 60 | 61 | 62 | 63 | 64 | 65 | 66 | 67 | 68 | 69 | 70 | 71 | 72 | 73 | 74 | 75 | 76 | 77 | 78 | 79 | 80 | 81 | 82 | 83 | 84 | 85 | 86 | 87 | 88 | 89 | 90 | 91 | 92 | 93 | 94 | 95 | 96 | 97 | 98 | 99 | 100) ;
        <102> = 'jor' ;
        <50> = 'top' ;
        <51> = ('bot' | 'bottom' ) ;
        <52> = ('train from add word' | 'word train' ) ;
        <53> = ('train from vocab' | 'cab train' ) ;
        <54> = 'Vocab that' ;
        <55> = 'Paste Here' ;
        <56> = 'start pycharm' ;
        <57> = 'powershell' ;
        <58> = ('powershell admin' | 'power add' ) ;
        <59> = 'start KB' ;
        <60> = 'kill KB' ;
        <61> = 'diper' ;
        <62> = 'tight' ;
        <63> = 'wink' ;
        <64> = 'bossman' ;
        <any> = <1>|<2>|<3>|<4>|<5>|<66>|<6>|<67>|<7>|<68>|<8>|<69>|<9>|<10>|<11>|<12>|<70>|<13>|<72>|<71>|<73>|<14>|<15>|<16>|<17>|<18>|<74>|<19>|<75>|<20>|<21>|<22>|<23>|<24>|<25>|<76>|<26>|<77>|<27>|<28>|<29>|<78>|<30>|<31>|<32>|<33>|<34>|<35>|<36>|<37>|<38>|<39>|<40>|<80>|<79>|<81>|<41>|<83>|<82>|<84>|<42>|<86>|<85>|<87>|<43>|<89>|<88>|<90>|<44>|<91>|<45>|<93>|<92>|<94>|<46>|<96>|<95>|<97>|<47>|<99>|<98>|<100>|<48>|<101>|<49>|<102>|<50>|<51>|<52>|<53>|<54>|<55>|<56>|<57>|<58>|<59>|<60>|<61>|<62>|<63>|<64>;
        <sequence> exported = <any> [<any> [<any> [<any>]]];
    """
    
    def initialize(self):
        self.load(self.gramSpec)
        self.currentModule = ("","",0)
        self.rule_state = {}
        self.activate('sequence')
    
    def activate_rule(self, rule, window, status):
        current = self.rule_state.get(rule)
        active = (current == window)
        if status == active: return
        if current:
            self.deactivate(rule)
            self.rule_state[rule] = None
        if status:
            try:
                self.activate(rule, window)
                self.rule_state[rule] = window
            except natlink.BadWindow:
                pass

    def gotBegin(self,moduleInfo):
        self.firstWord = 0
        window = moduleInfo[2]
        # Return if same window and title as before
        if moduleInfo == self.currentModule: return None
        self.currentModule = moduleInfo

        title = string.lower(moduleInfo[1])

    def convert_number_word(self, word):
        if   word == 'zero':
            return '0'
        elif word == 'one':
            return '1'
        elif word == 'two':
            return '2'
        elif word == 'three':
            return '3'
        elif word == 'four':
            return '4'
        elif word == 'five':
            return '5'
        elif word == 'six':
            return '6'
        elif word == 'seven':
            return '7'
        elif word == 'eight':
            return '8'
        elif word == 'nine':
            return '9'
        else:
            return word

    def get_key(self, list_buffer, functional, word):
        if word == 'alpha':
            list_buffer += 'a'
        elif word == 'bravo':
            list_buffer += 'b'
        elif word == 'charlie':
            list_buffer += 'c'
        elif word == 'delta':
            list_buffer += 'd'
        elif word == 'echo':
            list_buffer += 'e'
        elif word == 'foxtrot':
            list_buffer += 'f'
        elif word == 'golf':
            list_buffer += 'g'
        elif word == 'hotel':
            list_buffer += 'h'
        elif word == 'india':
            list_buffer += 'i'
        elif word == 'juliett':
            list_buffer += 'j'
        elif word == 'kilo':
            list_buffer += 'k'
        elif word == 'lima':
            list_buffer += 'l'
        elif word == 'mike':
            list_buffer += 'm'
        elif word == 'november':
            list_buffer += 'n'
        elif word == 'oscar':
            list_buffer += 'o'
        elif word == 'papa':
            list_buffer += 'p'
        elif word == 'quebec':
            list_buffer += 'q'
        elif word == 'romeo':
            list_buffer += 'r'
        elif word == 'sierra':
            list_buffer += 's'
        elif word == 'tango':
            list_buffer += 't'
        elif word == 'uniform':
            list_buffer += 'u'
        elif word == 'victor':
            list_buffer += 'v'
        elif word == 'whiskey':
            list_buffer += 'w'
        elif word == 'xray':
            list_buffer += 'x'
        elif word == 'yankee':
            list_buffer += 'y'
        elif word == 'zulu':
            list_buffer += 'z'
        elif word == '0':
            list_buffer += '0'
        elif word == '1':
            list_buffer += '1'
        elif word == '2':
            list_buffer += '2'
        elif word == '3':
            list_buffer += '3'
        elif word == '4':
            list_buffer += '4'
        elif word == '5':
            list_buffer += '5'
        elif word == '6':
            list_buffer += '6'
        elif word == '7':
            list_buffer += '7'
        elif word == '8':
            list_buffer += '8'
        elif word == '9':
            list_buffer += '9'
        elif word == '!':
            list_buffer += '!'
        elif word == '@':
            list_buffer += '@'
        elif word == '#':
            list_buffer += '#'
        elif word == '$':
            list_buffer += '$'
        elif word == '%':
            list_buffer += '%'
        elif word == '^':
            list_buffer += '^'
        elif word == '&':
            list_buffer += '&'
        elif word == '*':
            list_buffer += '*'
        elif word == '(':
            list_buffer += '('
        elif word == ')':
            list_buffer += ')'
        elif word == '`':
            list_buffer += '`'
        elif word == '~':
            list_buffer += '~'
        elif word == '-':
            list_buffer += '-'
        elif word == '_':
            list_buffer += '_'
        elif word == '=':
            list_buffer += '='
        elif word == '+':
            list_buffer += '+'
        elif word == '\\':
            list_buffer += '\\'
        elif word == '|':
            list_buffer += '|'
        elif word == '[':
            list_buffer += '['
        elif word == '{':
            list_buffer += '{'
        elif word == ']':
            list_buffer += ']'
        elif word == '}':
            list_buffer += '}'
        elif word == ';':
            list_buffer += ';'
        elif word == ':':
            list_buffer += ':'
        elif word == '\'':
            list_buffer += '\''
        elif word == '"':
            list_buffer += '"'
        elif word == ',':
            list_buffer += ','
        elif word == '<':
            list_buffer += '<'
        elif word == '.':
            list_buffer += '.'
        elif word == '>':
            list_buffer += '>'
        elif word == '/':
            list_buffer += '/'
        elif word == '?':
            list_buffer += '?'
        elif word == 'Left':
            list_buffer += 'Left'
        elif word == 'Right':
            list_buffer += 'Right'
        elif word == 'Up':
            list_buffer += 'Up'
        elif word == 'Down':
            list_buffer += 'Down'
        elif word == 'space-bar':
            list_buffer += ' '
        elif word == 'tab-key':
            list_buffer += 'Tab'
        elif word == 'Enter':
            list_buffer += 'Enter'
        elif word == 'page-up':
            list_buffer += 'PgUp'
        elif word == 'page-down':
            list_buffer += 'PgDn'
        elif word == 'Backspace':
            list_buffer += 'Backspace'
        elif word == 'delete':
            list_buffer += 'Del'
        elif word == 'Escape':
            list_buffer += 'Esc'
        elif word == 'Home':
            list_buffer += 'Home'
        elif word == 'End':
            list_buffer += 'End'
        return list_buffer

    # 'Press' <key>
    def gotResults_1(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_key(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('keys_sample.vch', 20, '\'Press\' <key>', e)
            self.firstWord = -1

    # <key> 'Here'
    def gotResults_2(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            saved_firstWord = self.firstWord
            call_Dragon('ButtonClick', 'ii', [])
            self.firstWord = saved_firstWord
            top_buffer += '{'
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_key(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('keys_sample.vch', 21, '<key> \'Here\'', e)
            self.firstWord = -1

    # 'Space Bar'
    def gotResults_3(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += ' '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_3(words[1:], fullResults)
        except Exception, e:
            handle_error('keys_sample.vch', 23, '\'Space Bar\'', e)
            self.firstWord = -1

    # 'Tab Key'
    def gotResults_4(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Tab}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_4(words[1:], fullResults)
        except Exception, e:
            handle_error('keys_sample.vch', 24, '\'Tab Key\'', e)
            self.firstWord = -1

    def get_special(self, list_buffer, functional, word):
        if word == 'Left':
            list_buffer += 'Left'
        elif word == 'Right':
            list_buffer += 'Right'
        elif word == 'Up':
            list_buffer += 'Up'
        elif word == 'Down':
            list_buffer += 'Down'
        elif word == 'space':
            list_buffer += ' '
        elif word == 'tab-key':
            list_buffer += 'Tab'
        elif word == 'Enter':
            list_buffer += 'Enter'
        elif word == 'page-up':
            list_buffer += 'PgUp'
        elif word == 'page-down':
            list_buffer += 'PgDn'
        elif word == 'Backspace':
            list_buffer += 'Backspace'
        elif word == 'delete':
            list_buffer += 'Del'
        elif word == 'escape':
            list_buffer += 'Esc'
        return list_buffer

    def get_mod(self, list_buffer, functional, word):
        if word == 'Shift':
            list_buffer += 'Shift'
        elif word == 'control -key':
            list_buffer += 'Ctrl'
        elif word == 'control':
            list_buffer += 'Ctrl'
        elif word == 'Alt':
            list_buffer += 'Alt'
        return list_buffer

    def get_nn(self, list_buffer, functional, word):
        list_buffer += self.convert_number_word(word)
        return list_buffer

    # 'Press' <special> <nn>
    def gotResults_5(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_special(top_buffer, False, word)
            top_buffer += '_'
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_nn(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('keys_sample.vch', 36, '\'Press\' <special> <nn>', e)
            self.firstWord = -1

    # (('Left' | 'Right' | 'Up' | 'Down' | 'space' | 'tab-key' | 'Enter' | 'page-up' | 'page-down' | 'Backspace' | 'delete' | 'escape')) <nn>
    def gotResults_66(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{'
            word = fullResults[0 + self.firstWord][0]
            if word == 'Left':
                top_buffer += 'Left'
            elif word == 'Right':
                top_buffer += 'Right'
            elif word == 'Up':
                top_buffer += 'Up'
            elif word == 'Down':
                top_buffer += 'Down'
            elif word == 'space':
                top_buffer += ' '
            elif word == 'tab-key':
                top_buffer += 'Tab'
            elif word == 'Enter':
                top_buffer += 'Enter'
            elif word == 'page-up':
                top_buffer += 'PgUp'
            elif word == 'page-down':
                top_buffer += 'PgDn'
            elif word == 'Backspace':
                top_buffer += 'Backspace'
            elif word == 'delete':
                top_buffer += 'Del'
            elif word == 'escape':
                top_buffer += 'Esc'
            top_buffer += '_'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_nn(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('keys_sample.vch', 36, '((\'Left\' | \'Right\' | \'Up\' | \'Down\' | \'space\' | \'tab-key\' | \'Enter\' | \'page-up\' | \'page-down\' | \'Backspace\' | \'delete\' | \'escape\')) <nn>', e)
            self.firstWord = -1

    # 'Press' <mod> <key> <nn>
    def gotResults_6(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_mod(top_buffer, False, word)
            top_buffer += '+'
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_key(top_buffer, False, word)
            top_buffer += '_'
            word = fullResults[3 + self.firstWord][0]
            top_buffer = self.get_nn(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 4
        except Exception, e:
            handle_error('keys_sample.vch', 37, '\'Press\' <mod> <key> <nn>', e)
            self.firstWord = -1

    # ('Shift' | 'control -key' | 'control' | 'Alt') <key> <nn>
    def gotResults_67(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{'
            word = fullResults[0 + self.firstWord][0]
            if word == 'Shift':
                top_buffer += 'Shift'
            elif word == 'control -key':
                top_buffer += 'Ctrl'
            elif word == 'control':
                top_buffer += 'Ctrl'
            elif word == 'Alt':
                top_buffer += 'Alt'
            top_buffer += '+'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_key(top_buffer, False, word)
            top_buffer += '_'
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_nn(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('keys_sample.vch', 37, '(\'Shift\' | \'control -key\' | \'control\' | \'Alt\') <key> <nn>', e)
            self.firstWord = -1

    # 'Press' <mod> <mod> <key> <nn>
    def gotResults_7(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_mod(top_buffer, False, word)
            top_buffer += '+'
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_mod(top_buffer, False, word)
            top_buffer += '+'
            word = fullResults[3 + self.firstWord][0]
            top_buffer = self.get_key(top_buffer, False, word)
            top_buffer += '_'
            word = fullResults[4 + self.firstWord][0]
            top_buffer = self.get_nn(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 5
        except Exception, e:
            handle_error('keys_sample.vch', 38, '\'Press\' <mod> <mod> <key> <nn>', e)
            self.firstWord = -1

    # ('Shift' | 'control -key' | 'control' | 'Alt') <mod> <key> <nn>
    def gotResults_68(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{'
            word = fullResults[0 + self.firstWord][0]
            if word == 'Shift':
                top_buffer += 'Shift'
            elif word == 'control -key':
                top_buffer += 'Ctrl'
            elif word == 'control':
                top_buffer += 'Ctrl'
            elif word == 'Alt':
                top_buffer += 'Alt'
            top_buffer += '+'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_mod(top_buffer, False, word)
            top_buffer += '+'
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_key(top_buffer, False, word)
            top_buffer += '_'
            word = fullResults[3 + self.firstWord][0]
            top_buffer = self.get_nn(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 4
        except Exception, e:
            handle_error('keys_sample.vch', 38, '(\'Shift\' | \'control -key\' | \'control\' | \'Alt\') <mod> <key> <nn>', e)
            self.firstWord = -1

    # 'Press' <mod> <mod> <mod> <key> <nn>
    def gotResults_8(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_mod(top_buffer, False, word)
            top_buffer += '+'
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_mod(top_buffer, False, word)
            top_buffer += '+'
            word = fullResults[3 + self.firstWord][0]
            top_buffer = self.get_mod(top_buffer, False, word)
            top_buffer += '+'
            word = fullResults[4 + self.firstWord][0]
            top_buffer = self.get_key(top_buffer, False, word)
            top_buffer += '_'
            word = fullResults[5 + self.firstWord][0]
            top_buffer = self.get_nn(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 6
        except Exception, e:
            handle_error('keys_sample.vch', 39, '\'Press\' <mod> <mod> <mod> <key> <nn>', e)
            self.firstWord = -1

    # ('Shift' | 'control -key' | 'control' | 'Alt') <mod> <mod> <key> <nn>
    def gotResults_69(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{'
            word = fullResults[0 + self.firstWord][0]
            if word == 'Shift':
                top_buffer += 'Shift'
            elif word == 'control -key':
                top_buffer += 'Ctrl'
            elif word == 'control':
                top_buffer += 'Ctrl'
            elif word == 'Alt':
                top_buffer += 'Alt'
            top_buffer += '+'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_mod(top_buffer, False, word)
            top_buffer += '+'
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_mod(top_buffer, False, word)
            top_buffer += '+'
            word = fullResults[3 + self.firstWord][0]
            top_buffer = self.get_key(top_buffer, False, word)
            top_buffer += '_'
            word = fullResults[4 + self.firstWord][0]
            top_buffer = self.get_nn(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 5
        except Exception, e:
            handle_error('keys_sample.vch', 39, '(\'Shift\' | \'control -key\' | \'control\' | \'Alt\') <mod> <mod> <key> <nn>', e)
            self.firstWord = -1

    # 'add subspecialty'
    def gotResults_9(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{space}'
            top_buffer += '""'
            top_buffer += '{left}'
            top_buffer = do_flush(False, top_buffer);
            unimacro_arg1 = ''
            unimacro_arg1 += 'SSK '
            unimacro_arg1 += '{alt+tab}'
            call_Unimacro(unimacro_arg1)
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '400'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += '{down}'
            top_buffer += '{ctrl+c}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer = do_flush(False, top_buffer);
            unimacro_arg1 = ''
            unimacro_arg1 += 'SSK '
            unimacro_arg1 += '{alt+tab}'
            call_Unimacro(unimacro_arg1)
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '400'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += '{ctrl+v}'
            top_buffer += '{backspace}'
            top_buffer += '{right}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_9(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 10, '\'add subspecialty\'', e)
            self.firstWord = -1

    # 'add subspecialty' 1..30
    def gotResults_10(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            limit = ''
            word = fullResults[1 + self.firstWord][0]
            limit += self.convert_number_word(word)
            for i in range(to_long(limit)):
                top_buffer += '{space}'
                top_buffer += '""'
                top_buffer += '{left}'
                top_buffer = do_flush(False, top_buffer);
                unimacro2_arg1 = ''
                unimacro2_arg1 += 'SSK '
                unimacro2_arg1 += '{alt+tab}'
                call_Unimacro(unimacro2_arg1)
                top_buffer = do_flush(False, top_buffer);
                dragon2_arg1 = ''
                dragon2_arg1 += '400'
                saved_firstWord = self.firstWord
                call_Dragon('Wait', 'i', [dragon2_arg1])
                self.firstWord = saved_firstWord
                top_buffer += '{down}'
                top_buffer += '{ctrl+c}'
                top_buffer = do_flush(False, top_buffer);
                dragon2_arg1 = ''
                dragon2_arg1 += '200'
                saved_firstWord = self.firstWord
                call_Dragon('Wait', 'i', [dragon2_arg1])
                self.firstWord = saved_firstWord
                top_buffer = do_flush(False, top_buffer);
                unimacro2_arg1 = ''
                unimacro2_arg1 += 'SSK '
                unimacro2_arg1 += '{alt+tab}'
                call_Unimacro(unimacro2_arg1)
                top_buffer = do_flush(False, top_buffer);
                dragon2_arg1 = ''
                dragon2_arg1 += '400'
                saved_firstWord = self.firstWord
                call_Dragon('Wait', 'i', [dragon2_arg1])
                self.firstWord = saved_firstWord
                top_buffer += '{ctrl+v}'
                top_buffer += '{backspace}'
                top_buffer += '{right}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_10(words[2:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 11, '\'add subspecialty\' 1..30', e)
            self.firstWord = -1

    # 'heard word'
    def gotResults_11(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'HeardWord()'
            top_buffer += '{left}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_11(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 13, '\'heard word\'', e)
            self.firstWord = -1

    # 'Google that'
    def gotResults_12(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{ctrl+c}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '100'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer = do_flush(False, top_buffer);
            unimacro_arg1 = ''
            unimacro_arg1 += 'WINKEY '
            unimacro_arg1 += '4'
            call_Unimacro(unimacro_arg1)
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '1000'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += '{ctrl+t}'
            top_buffer += '{ctrl+v}'
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_12(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 14, '\'Google that\'', e)
            self.firstWord = -1

    # 'Google'
    def gotResults_70(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{ctrl+c}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '100'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer = do_flush(False, top_buffer);
            unimacro_arg1 = ''
            unimacro_arg1 += 'WINKEY '
            unimacro_arg1 += '4'
            call_Unimacro(unimacro_arg1)
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '1000'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += '{ctrl+t}'
            top_buffer += '{ctrl+v}'
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_70(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 14, '\'Google\'', e)
            self.firstWord = -1

    # 'tray icon' 0..9
    def gotResults_13(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            unimacro_arg1 = ''
            unimacro_arg1 += 'WINKEY '
            unimacro_arg1 += 'b'
            call_Unimacro(unimacro_arg1)
            when_value = ''
            word = fullResults[1 + self.firstWord][0]
            when_value += self.convert_number_word(word)
            if when_value != "":
                top_buffer += '{right_'
                word = fullResults[1 + self.firstWord][0]
                top_buffer += self.convert_number_word(word)
                top_buffer += '}'
                top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_13(words[2:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 17, '\'tray icon\' 0..9', e)
            self.firstWord = -1

    # 'tray icon'
    def gotResults_72(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            unimacro_arg1 = ''
            unimacro_arg1 += 'WINKEY '
            unimacro_arg1 += 'b'
            call_Unimacro(unimacro_arg1)
            when_value = ''
            when_value += ''
            if when_value != "":
                top_buffer += '{right_'
                top_buffer += ''
                top_buffer += '}'
                top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_72(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 17, '\'tray icon\'', e)
            self.firstWord = -1

    # 'tray' 0..9
    def gotResults_71(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            unimacro_arg1 = ''
            unimacro_arg1 += 'WINKEY '
            unimacro_arg1 += 'b'
            call_Unimacro(unimacro_arg1)
            when_value = ''
            word = fullResults[1 + self.firstWord][0]
            when_value += self.convert_number_word(word)
            if when_value != "":
                top_buffer += '{right_'
                word = fullResults[1 + self.firstWord][0]
                top_buffer += self.convert_number_word(word)
                top_buffer += '}'
                top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_71(words[2:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 17, '\'tray\' 0..9', e)
            self.firstWord = -1

    # 'tray'
    def gotResults_73(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            unimacro_arg1 = ''
            unimacro_arg1 += 'WINKEY '
            unimacro_arg1 += 'b'
            call_Unimacro(unimacro_arg1)
            when_value = ''
            when_value += ''
            if when_value != "":
                top_buffer += '{right_'
                top_buffer += ''
                top_buffer += '}'
                top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_73(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 17, '\'tray\'', e)
            self.firstWord = -1

    # ('sloop' | 'sleep')
    def gotResults_14(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{f1}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_14(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 18, '(\'sloop\' | \'sleep\')', e)
            self.firstWord = -1

    # 'command mode'
    def gotResults_15(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            unimacro_arg1 = ''
            unimacro_arg1 += 'HW '
            unimacro_arg1 += 'command'
            unimacro_arg1 += 'mode'
            unimacro_arg1 += 'on'
            call_Unimacro(unimacro_arg1)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_15(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 21, '\'command mode\'', e)
            self.firstWord = -1

    # 'sleep Windows'
    def gotResults_16(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += 'start'
            dragon_arg2 = ''
            dragon_arg2 += 'menu'
            saved_firstWord = self.firstWord
            call_Dragon('HeardWord', 'ssssssss', [dragon_arg1, dragon_arg2])
            self.firstWord = saved_firstWord
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '300'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += '{tab_2}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '50'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += '{down}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '20'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += '{down}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '20'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += '{down}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '20'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += '{down}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '20'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += '{down}'
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_16(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 22, '\'sleep Windows\'', e)
            self.firstWord = -1

    # ('flags' | 'circles' | 'sirk' | 'numbers')
    def gotResults_17(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += 'show'
            dragon_arg2 = ''
            word = fullResults[0 + self.firstWord][0]
            if word == 'flags':
                dragon_arg2 += 'flags'
            elif word == 'circles':
                dragon_arg2 += 'circles'
            elif word == 'sirk':
                dragon_arg2 += 'circles'
            elif word == 'numbers':
                dragon_arg2 += 'numbers'
            saved_firstWord = self.firstWord
            call_Dragon('HeardWord', 'ssssssss', [dragon_arg1, dragon_arg2])
            self.firstWord = saved_firstWord
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_17(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 23, '(\'flags\' | \'circles\' | \'sirk\' | \'numbers\')', e)
            self.firstWord = -1

    # 'cush' <_anything>
    def gotResults_18(self, words, fullResults):
        if self.firstWord<0:
            return
        fullResults = combineDictationWords(fullResults)
        opt = 1 + self.firstWord
        if opt >= len(fullResults) or fullResults[opt][1] != 'converted dgndictation':
            fullResults.insert(opt, ['', 'converted dgndictation'])
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '1'
            dragon_arg2 = ''
            dragon_arg2 += '1'
            saved_firstWord = self.firstWord
            call_Dragon('ButtonClick', 'ii', [dragon_arg1, dragon_arg2])
            self.firstWord = saved_firstWord
            word = fullResults[1 + self.firstWord][0]
            top_buffer += word
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('_vocola.vcl', 30, '\'cush\' <_anything>', e)
            self.firstWord = -1

    # 'cush'
    def gotResults_74(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '1'
            dragon_arg2 = ''
            dragon_arg2 += '1'
            saved_firstWord = self.firstWord
            call_Dragon('ButtonClick', 'ii', [dragon_arg1, dragon_arg2])
            self.firstWord = saved_firstWord
            top_buffer += ''
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_74(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 30, '\'cush\'', e)
            self.firstWord = -1

    # 'sush' <_anything>
    def gotResults_19(self, words, fullResults):
        if self.firstWord<0:
            return
        fullResults = combineDictationWords(fullResults)
        opt = 1 + self.firstWord
        if opt >= len(fullResults) or fullResults[opt][1] != 'converted dgndictation':
            fullResults.insert(opt, ['', 'converted dgndictation'])
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '1'
            dragon_arg2 = ''
            dragon_arg2 += '1'
            saved_firstWord = self.firstWord
            call_Dragon('ButtonClick', 'ii', [dragon_arg1, dragon_arg2])
            self.firstWord = saved_firstWord
            top_buffer += '{space}'
            word = fullResults[1 + self.firstWord][0]
            top_buffer += word
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('_vocola.vcl', 31, '\'sush\' <_anything>', e)
            self.firstWord = -1

    # 'sush'
    def gotResults_75(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '1'
            dragon_arg2 = ''
            dragon_arg2 += '1'
            saved_firstWord = self.firstWord
            call_Dragon('ButtonClick', 'ii', [dragon_arg1, dragon_arg2])
            self.firstWord = saved_firstWord
            top_buffer += '{space}'
            top_buffer += ''
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_75(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 31, '\'sush\'', e)
            self.firstWord = -1

    # 'mick'
    def gotResults_20(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '1'
            dragon_arg2 = ''
            dragon_arg2 += '1'
            saved_firstWord = self.firstWord
            call_Dragon('ButtonClick', 'ii', [dragon_arg1, dragon_arg2])
            self.firstWord = saved_firstWord
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_20(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 33, '\'mick\'', e)
            self.firstWord = -1

    # 'dick'
    def gotResults_21(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '1'
            dragon_arg2 = ''
            dragon_arg2 += '2'
            saved_firstWord = self.firstWord
            call_Dragon('ButtonClick', 'ii', [dragon_arg1, dragon_arg2])
            self.firstWord = saved_firstWord
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_21(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 34, '\'dick\'', e)
            self.firstWord = -1

    # 'rick'
    def gotResults_22(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '2'
            dragon_arg2 = ''
            dragon_arg2 += '1'
            saved_firstWord = self.firstWord
            call_Dragon('ButtonClick', 'ii', [dragon_arg1, dragon_arg2])
            self.firstWord = saved_firstWord
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_22(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 35, '\'rick\'', e)
            self.firstWord = -1

    # 'space'
    def gotResults_23(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{space}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_23(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 36, '\'space\'', e)
            self.firstWord = -1

    # 'save'
    def gotResults_24(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{ctrl+s}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_24(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 37, '\'save\'', e)
            self.firstWord = -1

    # 'fully kill'
    def gotResults_25(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{backspace}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_25(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 38, '\'fully kill\'', e)
            self.firstWord = -1

    # 'kill'
    def gotResults_76(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{backspace}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_76(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 38, '\'kill\'', e)
            self.firstWord = -1

    # 'next jack' 1..9
    def gotResults_26(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{alt+esc_'
            word = fullResults[1 + self.firstWord][0]
            top_buffer += self.convert_number_word(word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_26(words[2:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 39, '\'next jack\' 1..9', e)
            self.firstWord = -1

    # 'jack' 1..9
    def gotResults_77(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{alt+esc_'
            word = fullResults[1 + self.firstWord][0]
            top_buffer += self.convert_number_word(word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_77(words[2:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 39, '\'jack\' 1..9', e)
            self.firstWord = -1

    # ('ant' | 'enter') 1..9
    def gotResults_27(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{enter_'
            word = fullResults[1 + self.firstWord][0]
            top_buffer += self.convert_number_word(word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_27(words[2:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 42, '(\'ant\' | \'enter\') 1..9', e)
            self.firstWord = -1

    # 'semi'
    def gotResults_28(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += ';'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_28(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 43, '\'semi\'', e)
            self.firstWord = -1

    # 'sosh' <_anything>
    def gotResults_29(self, words, fullResults):
        if self.firstWord<0:
            return
        fullResults = combineDictationWords(fullResults)
        opt = 1 + self.firstWord
        if opt >= len(fullResults) or fullResults[opt][1] != 'converted dgndictation':
            fullResults.insert(opt, ['', 'converted dgndictation'])
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            unimacro_arg1 = ''
            unimacro_arg1 += 'SSK '
            unimacro_arg1 += '{alt+tab}'
            call_Unimacro(unimacro_arg1)
            word = fullResults[1 + self.firstWord][0]
            top_buffer += word
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('_vocola.vcl', 46, '\'sosh\' <_anything>', e)
            self.firstWord = -1

    # 'sosh'
    def gotResults_78(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            unimacro_arg1 = ''
            unimacro_arg1 += 'SSK '
            unimacro_arg1 += '{alt+tab}'
            call_Unimacro(unimacro_arg1)
            top_buffer += ''
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_78(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 46, '\'sosh\'', e)
            self.firstWord = -1

    # 'shsh'
    def gotResults_30(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '1'
            dragon_arg2 = ''
            dragon_arg2 += '1'
            saved_firstWord = self.firstWord
            call_Dragon('ButtonClick', 'ii', [dragon_arg1, dragon_arg2])
            self.firstWord = saved_firstWord
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_30(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 47, '\'shsh\'', e)
            self.firstWord = -1

    # 'ss'
    def gotResults_31(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '1'
            dragon_arg2 = ''
            dragon_arg2 += '2'
            saved_firstWord = self.firstWord
            call_Dragon('ButtonClick', 'ii', [dragon_arg1, dragon_arg2])
            self.firstWord = saved_firstWord
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_31(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 48, '\'ss\'', e)
            self.firstWord = -1

    # 'pounce' <_anything>
    def gotResults_32(self, words, fullResults):
        if self.firstWord<0:
            return
        fullResults = combineDictationWords(fullResults)
        opt = 1 + self.firstWord
        if opt >= len(fullResults) or fullResults[opt][1] != 'converted dgndictation':
            fullResults.insert(opt, ['', 'converted dgndictation'])
        try:
            top_buffer = ''
            word = fullResults[1 + self.firstWord][0]
            top_buffer += word
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('_vocola.vcl', 49, '\'pounce\' <_anything>', e)
            self.firstWord = -1

    # 'new tab'
    def gotResults_33(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{ctrl+t}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_33(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 55, '\'new tab\'', e)
            self.firstWord = -1

    # 'clipboard'
    def gotResults_34(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{ctrl+'
            top_buffer += '\''
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_34(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 56, '\'clipboard\'', e)
            self.firstWord = -1

    # 'clip' 1..9
    def gotResults_35(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{ctrl+'
            top_buffer += '\''
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            limit = ''
            word = fullResults[1 + self.firstWord][0]
            limit += self.convert_number_word(word)
            for i in range(to_long(limit)):
                top_buffer += '{down}'
            top_buffer += '{up}'
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_35(words[2:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 57, '\'clip\' 1..9', e)
            self.firstWord = -1

    # ('teb' | 'tab') 1..9
    def gotResults_36(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{tab_'
            word = fullResults[0 + self.firstWord][0]
            top_buffer += word
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_36(words[2:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 59, '(\'teb\' | \'tab\') 1..9', e)
            self.firstWord = -1

    # ('escape' | 'Eck')
    def gotResults_37(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_37(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 60, '(\'escape\' | \'Eck\')', e)
            self.firstWord = -1

    # 'end'
    def gotResults_38(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{end}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_38(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 61, '\'end\'', e)
            self.firstWord = -1

    # 'tome'
    def gotResults_39(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{home}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_39(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 62, '\'tome\'', e)
            self.firstWord = -1

    # 'smack' 1..9 <_anything>
    def gotResults_40(self, words, fullResults):
        if self.firstWord<0:
            return
        fullResults = combineDictationWords(fullResults)
        opt = 2 + self.firstWord
        if opt >= len(fullResults) or fullResults[opt][1] != 'converted dgndictation':
            fullResults.insert(opt, ['', 'converted dgndictation'])
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+Shift+left_'
            when_value = ''
            word = fullResults[1 + self.firstWord][0]
            when_value += self.convert_number_word(word)
            if when_value != "":
                word = fullResults[1 + self.firstWord][0]
                top_buffer += self.convert_number_word(word)
            else:
                top_buffer += '1'
            top_buffer += '}'
            top_buffer += '{backspace}'
            when_value = ''
            word = fullResults[2 + self.firstWord][0]
            when_value += word
            if when_value != "":
                word = fullResults[2 + self.firstWord][0]
                top_buffer += word
                top_buffer += '{space}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('_vocola.vcl', 64, '\'smack\' 1..9 <_anything>', e)
            self.firstWord = -1

    # 'smack' 1..9
    def gotResults_80(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+Shift+left_'
            when_value = ''
            word = fullResults[1 + self.firstWord][0]
            when_value += self.convert_number_word(word)
            if when_value != "":
                word = fullResults[1 + self.firstWord][0]
                top_buffer += self.convert_number_word(word)
            else:
                top_buffer += '1'
            top_buffer += '}'
            top_buffer += '{backspace}'
            when_value = ''
            when_value += ''
            if when_value != "":
                top_buffer += ''
                top_buffer += '{space}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_80(words[2:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 64, '\'smack\' 1..9', e)
            self.firstWord = -1

    # 'smack' <_anything>
    def gotResults_79(self, words, fullResults):
        if self.firstWord<0:
            return
        fullResults = combineDictationWords(fullResults)
        opt = 1 + self.firstWord
        if opt >= len(fullResults) or fullResults[opt][1] != 'converted dgndictation':
            fullResults.insert(opt, ['', 'converted dgndictation'])
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+Shift+left_'
            when_value = ''
            when_value += ''
            if when_value != "":
                top_buffer += ''
            else:
                top_buffer += '1'
            top_buffer += '}'
            top_buffer += '{backspace}'
            when_value = ''
            word = fullResults[1 + self.firstWord][0]
            when_value += word
            if when_value != "":
                word = fullResults[1 + self.firstWord][0]
                top_buffer += word
                top_buffer += '{space}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('_vocola.vcl', 64, '\'smack\' <_anything>', e)
            self.firstWord = -1

    # 'smack'
    def gotResults_81(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+Shift+left_'
            when_value = ''
            when_value += ''
            if when_value != "":
                top_buffer += ''
            else:
                top_buffer += '1'
            top_buffer += '}'
            top_buffer += '{backspace}'
            when_value = ''
            when_value += ''
            if when_value != "":
                top_buffer += ''
                top_buffer += '{space}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_81(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 64, '\'smack\'', e)
            self.firstWord = -1

    # 'jack' 1..9 <_anything>
    def gotResults_41(self, words, fullResults):
        if self.firstWord<0:
            return
        fullResults = combineDictationWords(fullResults)
        opt = 2 + self.firstWord
        if opt >= len(fullResults) or fullResults[opt][1] != 'converted dgndictation':
            fullResults.insert(opt, ['', 'converted dgndictation'])
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+shift+right_'
            when_value = ''
            word = fullResults[1 + self.firstWord][0]
            when_value += self.convert_number_word(word)
            if when_value != "":
                word = fullResults[1 + self.firstWord][0]
                top_buffer += self.convert_number_word(word)
            else:
                top_buffer += '1'
            top_buffer += '}'
            top_buffer += '{del}'
            when_value = ''
            word = fullResults[2 + self.firstWord][0]
            when_value += word
            if when_value != "":
                word = fullResults[2 + self.firstWord][0]
                top_buffer += word
                top_buffer += '{space}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('_vocola.vcl', 65, '\'jack\' 1..9 <_anything>', e)
            self.firstWord = -1

    # 'jack' 1..9
    def gotResults_83(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+shift+right_'
            when_value = ''
            word = fullResults[1 + self.firstWord][0]
            when_value += self.convert_number_word(word)
            if when_value != "":
                word = fullResults[1 + self.firstWord][0]
                top_buffer += self.convert_number_word(word)
            else:
                top_buffer += '1'
            top_buffer += '}'
            top_buffer += '{del}'
            when_value = ''
            when_value += ''
            if when_value != "":
                top_buffer += ''
                top_buffer += '{space}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_83(words[2:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 65, '\'jack\' 1..9', e)
            self.firstWord = -1

    # 'jack' <_anything>
    def gotResults_82(self, words, fullResults):
        if self.firstWord<0:
            return
        fullResults = combineDictationWords(fullResults)
        opt = 1 + self.firstWord
        if opt >= len(fullResults) or fullResults[opt][1] != 'converted dgndictation':
            fullResults.insert(opt, ['', 'converted dgndictation'])
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+shift+right_'
            when_value = ''
            when_value += ''
            if when_value != "":
                top_buffer += ''
            else:
                top_buffer += '1'
            top_buffer += '}'
            top_buffer += '{del}'
            when_value = ''
            word = fullResults[1 + self.firstWord][0]
            when_value += word
            if when_value != "":
                word = fullResults[1 + self.firstWord][0]
                top_buffer += word
                top_buffer += '{space}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('_vocola.vcl', 65, '\'jack\' <_anything>', e)
            self.firstWord = -1

    # 'jack'
    def gotResults_84(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+shift+right_'
            when_value = ''
            when_value += ''
            if when_value != "":
                top_buffer += ''
            else:
                top_buffer += '1'
            top_buffer += '}'
            top_buffer += '{del}'
            when_value = ''
            when_value += ''
            if when_value != "":
                top_buffer += ''
                top_buffer += '{space}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_84(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 65, '\'jack\'', e)
            self.firstWord = -1

    # 'brack' 1..9 <_anything>
    def gotResults_42(self, words, fullResults):
        if self.firstWord<0:
            return
        fullResults = combineDictationWords(fullResults)
        opt = 2 + self.firstWord
        if opt >= len(fullResults) or fullResults[opt][1] != 'converted dgndictation':
            fullResults.insert(opt, ['', 'converted dgndictation'])
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+Backspace_'
            when_value = ''
            word = fullResults[1 + self.firstWord][0]
            when_value += self.convert_number_word(word)
            if when_value != "":
                word = fullResults[1 + self.firstWord][0]
                top_buffer += self.convert_number_word(word)
            else:
                top_buffer += '1'
            top_buffer += '}'
            when_value = ''
            word = fullResults[2 + self.firstWord][0]
            when_value += word
            if when_value != "":
                top_buffer += '{space}'
                word = fullResults[2 + self.firstWord][0]
                top_buffer += word
                top_buffer += '{space}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('_vocola.vcl', 66, '\'brack\' 1..9 <_anything>', e)
            self.firstWord = -1

    # 'brack' 1..9
    def gotResults_86(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+Backspace_'
            when_value = ''
            word = fullResults[1 + self.firstWord][0]
            when_value += self.convert_number_word(word)
            if when_value != "":
                word = fullResults[1 + self.firstWord][0]
                top_buffer += self.convert_number_word(word)
            else:
                top_buffer += '1'
            top_buffer += '}'
            when_value = ''
            when_value += ''
            if when_value != "":
                top_buffer += '{space}'
                top_buffer += ''
                top_buffer += '{space}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_86(words[2:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 66, '\'brack\' 1..9', e)
            self.firstWord = -1

    # 'brack' <_anything>
    def gotResults_85(self, words, fullResults):
        if self.firstWord<0:
            return
        fullResults = combineDictationWords(fullResults)
        opt = 1 + self.firstWord
        if opt >= len(fullResults) or fullResults[opt][1] != 'converted dgndictation':
            fullResults.insert(opt, ['', 'converted dgndictation'])
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+Backspace_'
            when_value = ''
            when_value += ''
            if when_value != "":
                top_buffer += ''
            else:
                top_buffer += '1'
            top_buffer += '}'
            when_value = ''
            word = fullResults[1 + self.firstWord][0]
            when_value += word
            if when_value != "":
                top_buffer += '{space}'
                word = fullResults[1 + self.firstWord][0]
                top_buffer += word
                top_buffer += '{space}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('_vocola.vcl', 66, '\'brack\' <_anything>', e)
            self.firstWord = -1

    # 'brack'
    def gotResults_87(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+Backspace_'
            when_value = ''
            when_value += ''
            if when_value != "":
                top_buffer += ''
            else:
                top_buffer += '1'
            top_buffer += '}'
            when_value = ''
            when_value += ''
            if when_value != "":
                top_buffer += '{space}'
                top_buffer += ''
                top_buffer += '{space}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_87(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 66, '\'brack\'', e)
            self.firstWord = -1

    # 'frack' 1..9 <_anything>
    def gotResults_43(self, words, fullResults):
        if self.firstWord<0:
            return
        fullResults = combineDictationWords(fullResults)
        opt = 2 + self.firstWord
        if opt >= len(fullResults) or fullResults[opt][1] != 'converted dgndictation':
            fullResults.insert(opt, ['', 'converted dgndictation'])
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+Del_'
            when_value = ''
            word = fullResults[1 + self.firstWord][0]
            when_value += self.convert_number_word(word)
            if when_value != "":
                word = fullResults[1 + self.firstWord][0]
                top_buffer += self.convert_number_word(word)
            else:
                top_buffer += '1'
            top_buffer += '}'
            when_value = ''
            word = fullResults[2 + self.firstWord][0]
            when_value += word
            if when_value != "":
                word = fullResults[2 + self.firstWord][0]
                top_buffer += word
                top_buffer += '{space}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('_vocola.vcl', 67, '\'frack\' 1..9 <_anything>', e)
            self.firstWord = -1

    # 'frack' 1..9
    def gotResults_89(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+Del_'
            when_value = ''
            word = fullResults[1 + self.firstWord][0]
            when_value += self.convert_number_word(word)
            if when_value != "":
                word = fullResults[1 + self.firstWord][0]
                top_buffer += self.convert_number_word(word)
            else:
                top_buffer += '1'
            top_buffer += '}'
            when_value = ''
            when_value += ''
            if when_value != "":
                top_buffer += ''
                top_buffer += '{space}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_89(words[2:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 67, '\'frack\' 1..9', e)
            self.firstWord = -1

    # 'frack' <_anything>
    def gotResults_88(self, words, fullResults):
        if self.firstWord<0:
            return
        fullResults = combineDictationWords(fullResults)
        opt = 1 + self.firstWord
        if opt >= len(fullResults) or fullResults[opt][1] != 'converted dgndictation':
            fullResults.insert(opt, ['', 'converted dgndictation'])
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+Del_'
            when_value = ''
            when_value += ''
            if when_value != "":
                top_buffer += ''
            else:
                top_buffer += '1'
            top_buffer += '}'
            when_value = ''
            word = fullResults[1 + self.firstWord][0]
            when_value += word
            if when_value != "":
                word = fullResults[1 + self.firstWord][0]
                top_buffer += word
                top_buffer += '{space}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('_vocola.vcl', 67, '\'frack\' <_anything>', e)
            self.firstWord = -1

    # 'frack'
    def gotResults_90(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+Del_'
            when_value = ''
            when_value += ''
            if when_value != "":
                top_buffer += ''
            else:
                top_buffer += '1'
            top_buffer += '}'
            when_value = ''
            when_value += ''
            if when_value != "":
                top_buffer += ''
                top_buffer += '{space}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_90(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 67, '\'frack\'', e)
            self.firstWord = -1

    # 'spack' 1..9 <_anything>
    def gotResults_44(self, words, fullResults):
        if self.firstWord<0:
            return
        fullResults = combineDictationWords(fullResults)
        opt = 2 + self.firstWord
        if opt >= len(fullResults) or fullResults[opt][1] != 'converted dgndictation':
            fullResults.insert(opt, ['', 'converted dgndictation'])
        try:
            top_buffer = ''
            top_buffer += '{Backspace_'
            word = fullResults[1 + self.firstWord][0]
            top_buffer += self.convert_number_word(word)
            top_buffer += '}'
            word = fullResults[2 + self.firstWord][0]
            top_buffer += word
            top_buffer += '{space}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('_vocola.vcl', 70, '\'spack\' 1..9 <_anything>', e)
            self.firstWord = -1

    # 'spack' 1..9
    def gotResults_91(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Backspace_'
            word = fullResults[1 + self.firstWord][0]
            top_buffer += self.convert_number_word(word)
            top_buffer += '}'
            top_buffer += ''
            top_buffer += '{space}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_91(words[2:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 70, '\'spack\' 1..9', e)
            self.firstWord = -1

    # 'del' 1..9 <_anything>
    def gotResults_45(self, words, fullResults):
        if self.firstWord<0:
            return
        fullResults = combineDictationWords(fullResults)
        opt = 2 + self.firstWord
        if opt >= len(fullResults) or fullResults[opt][1] != 'converted dgndictation':
            fullResults.insert(opt, ['', 'converted dgndictation'])
        try:
            top_buffer = ''
            top_buffer += '{Del_'
            when_value = ''
            word = fullResults[1 + self.firstWord][0]
            when_value += self.convert_number_word(word)
            if when_value != "":
                word = fullResults[1 + self.firstWord][0]
                top_buffer += self.convert_number_word(word)
            else:
                top_buffer += '1'
            top_buffer += '}'
            when_value = ''
            word = fullResults[2 + self.firstWord][0]
            when_value += word
            if when_value != "":
                top_buffer += '{space}'
                word = fullResults[2 + self.firstWord][0]
                top_buffer += word
                top_buffer += '{space}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('_vocola.vcl', 71, '\'del\' 1..9 <_anything>', e)
            self.firstWord = -1

    # 'del' 1..9
    def gotResults_93(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Del_'
            when_value = ''
            word = fullResults[1 + self.firstWord][0]
            when_value += self.convert_number_word(word)
            if when_value != "":
                word = fullResults[1 + self.firstWord][0]
                top_buffer += self.convert_number_word(word)
            else:
                top_buffer += '1'
            top_buffer += '}'
            when_value = ''
            when_value += ''
            if when_value != "":
                top_buffer += '{space}'
                top_buffer += ''
                top_buffer += '{space}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_93(words[2:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 71, '\'del\' 1..9', e)
            self.firstWord = -1

    # 'del' <_anything>
    def gotResults_92(self, words, fullResults):
        if self.firstWord<0:
            return
        fullResults = combineDictationWords(fullResults)
        opt = 1 + self.firstWord
        if opt >= len(fullResults) or fullResults[opt][1] != 'converted dgndictation':
            fullResults.insert(opt, ['', 'converted dgndictation'])
        try:
            top_buffer = ''
            top_buffer += '{Del_'
            when_value = ''
            when_value += ''
            if when_value != "":
                top_buffer += ''
            else:
                top_buffer += '1'
            top_buffer += '}'
            when_value = ''
            word = fullResults[1 + self.firstWord][0]
            when_value += word
            if when_value != "":
                top_buffer += '{space}'
                word = fullResults[1 + self.firstWord][0]
                top_buffer += word
                top_buffer += '{space}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('_vocola.vcl', 71, '\'del\' <_anything>', e)
            self.firstWord = -1

    # 'del'
    def gotResults_94(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Del_'
            when_value = ''
            when_value += ''
            if when_value != "":
                top_buffer += ''
            else:
                top_buffer += '1'
            top_buffer += '}'
            when_value = ''
            when_value += ''
            if when_value != "":
                top_buffer += '{space}'
                top_buffer += ''
                top_buffer += '{space}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_94(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 71, '\'del\'', e)
            self.firstWord = -1

    # 'lor' 1..100 <_anything>
    def gotResults_46(self, words, fullResults):
        if self.firstWord<0:
            return
        fullResults = combineDictationWords(fullResults)
        opt = 2 + self.firstWord
        if opt >= len(fullResults) or fullResults[opt][1] != 'converted dgndictation':
            fullResults.insert(opt, ['', 'converted dgndictation'])
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+left_'
            when_value = ''
            word = fullResults[1 + self.firstWord][0]
            when_value += self.convert_number_word(word)
            if when_value != "":
                word = fullResults[1 + self.firstWord][0]
                top_buffer += self.convert_number_word(word)
            else:
                top_buffer += '1'
            top_buffer += '}'
            when_value = ''
            word = fullResults[2 + self.firstWord][0]
            when_value += word
            if when_value != "":
                top_buffer += '{space}'
                word = fullResults[2 + self.firstWord][0]
                top_buffer += word
                top_buffer += '{space}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('_vocola.vcl', 72, '\'lor\' 1..100 <_anything>', e)
            self.firstWord = -1

    # 'lor' 1..100
    def gotResults_96(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+left_'
            when_value = ''
            word = fullResults[1 + self.firstWord][0]
            when_value += self.convert_number_word(word)
            if when_value != "":
                word = fullResults[1 + self.firstWord][0]
                top_buffer += self.convert_number_word(word)
            else:
                top_buffer += '1'
            top_buffer += '}'
            when_value = ''
            when_value += ''
            if when_value != "":
                top_buffer += '{space}'
                top_buffer += ''
                top_buffer += '{space}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_96(words[2:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 72, '\'lor\' 1..100', e)
            self.firstWord = -1

    # 'lor' <_anything>
    def gotResults_95(self, words, fullResults):
        if self.firstWord<0:
            return
        fullResults = combineDictationWords(fullResults)
        opt = 1 + self.firstWord
        if opt >= len(fullResults) or fullResults[opt][1] != 'converted dgndictation':
            fullResults.insert(opt, ['', 'converted dgndictation'])
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+left_'
            when_value = ''
            when_value += ''
            if when_value != "":
                top_buffer += ''
            else:
                top_buffer += '1'
            top_buffer += '}'
            when_value = ''
            word = fullResults[1 + self.firstWord][0]
            when_value += word
            if when_value != "":
                top_buffer += '{space}'
                word = fullResults[1 + self.firstWord][0]
                top_buffer += word
                top_buffer += '{space}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('_vocola.vcl', 72, '\'lor\' <_anything>', e)
            self.firstWord = -1

    # 'lor'
    def gotResults_97(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+left_'
            when_value = ''
            when_value += ''
            if when_value != "":
                top_buffer += ''
            else:
                top_buffer += '1'
            top_buffer += '}'
            when_value = ''
            when_value += ''
            if when_value != "":
                top_buffer += '{space}'
                top_buffer += ''
                top_buffer += '{space}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_97(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 72, '\'lor\'', e)
            self.firstWord = -1

    # 'ror' 1..100 <_anything>
    def gotResults_47(self, words, fullResults):
        if self.firstWord<0:
            return
        fullResults = combineDictationWords(fullResults)
        opt = 2 + self.firstWord
        if opt >= len(fullResults) or fullResults[opt][1] != 'converted dgndictation':
            fullResults.insert(opt, ['', 'converted dgndictation'])
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+right_'
            when_value = ''
            word = fullResults[1 + self.firstWord][0]
            when_value += self.convert_number_word(word)
            if when_value != "":
                word = fullResults[1 + self.firstWord][0]
                top_buffer += self.convert_number_word(word)
            else:
                top_buffer += '1'
            top_buffer += '}'
            when_value = ''
            word = fullResults[2 + self.firstWord][0]
            when_value += word
            if when_value != "":
                top_buffer += '{space}'
                word = fullResults[2 + self.firstWord][0]
                top_buffer += word
                top_buffer += '{space}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('_vocola.vcl', 73, '\'ror\' 1..100 <_anything>', e)
            self.firstWord = -1

    # 'ror' 1..100
    def gotResults_99(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+right_'
            when_value = ''
            word = fullResults[1 + self.firstWord][0]
            when_value += self.convert_number_word(word)
            if when_value != "":
                word = fullResults[1 + self.firstWord][0]
                top_buffer += self.convert_number_word(word)
            else:
                top_buffer += '1'
            top_buffer += '}'
            when_value = ''
            when_value += ''
            if when_value != "":
                top_buffer += '{space}'
                top_buffer += ''
                top_buffer += '{space}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_99(words[2:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 73, '\'ror\' 1..100', e)
            self.firstWord = -1

    # 'ror' <_anything>
    def gotResults_98(self, words, fullResults):
        if self.firstWord<0:
            return
        fullResults = combineDictationWords(fullResults)
        opt = 1 + self.firstWord
        if opt >= len(fullResults) or fullResults[opt][1] != 'converted dgndictation':
            fullResults.insert(opt, ['', 'converted dgndictation'])
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+right_'
            when_value = ''
            when_value += ''
            if when_value != "":
                top_buffer += ''
            else:
                top_buffer += '1'
            top_buffer += '}'
            when_value = ''
            word = fullResults[1 + self.firstWord][0]
            when_value += word
            if when_value != "":
                top_buffer += '{space}'
                word = fullResults[1 + self.firstWord][0]
                top_buffer += word
                top_buffer += '{space}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('_vocola.vcl', 73, '\'ror\' <_anything>', e)
            self.firstWord = -1

    # 'ror'
    def gotResults_100(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+right_'
            when_value = ''
            when_value += ''
            if when_value != "":
                top_buffer += ''
            else:
                top_buffer += '1'
            top_buffer += '}'
            when_value = ''
            when_value += ''
            if when_value != "":
                top_buffer += '{space}'
                top_buffer += ''
                top_buffer += '{space}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_100(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 73, '\'ror\'', e)
            self.firstWord = -1

    # 'slor' 1..100
    def gotResults_48(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+shift+left_'
            when_value = ''
            word = fullResults[1 + self.firstWord][0]
            when_value += self.convert_number_word(word)
            if when_value != "":
                word = fullResults[1 + self.firstWord][0]
                top_buffer += self.convert_number_word(word)
            else:
                top_buffer += '1'
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_48(words[2:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 74, '\'slor\' 1..100', e)
            self.firstWord = -1

    # 'slor'
    def gotResults_101(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+shift+left_'
            when_value = ''
            when_value += ''
            if when_value != "":
                top_buffer += ''
            else:
                top_buffer += '1'
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_101(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 74, '\'slor\'', e)
            self.firstWord = -1

    # 'jor' 1..100
    def gotResults_49(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+shift+right_'
            when_value = ''
            word = fullResults[1 + self.firstWord][0]
            when_value += self.convert_number_word(word)
            if when_value != "":
                word = fullResults[1 + self.firstWord][0]
                top_buffer += self.convert_number_word(word)
            else:
                top_buffer += '1'
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_49(words[2:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 75, '\'jor\' 1..100', e)
            self.firstWord = -1

    # 'jor'
    def gotResults_102(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+shift+right_'
            when_value = ''
            when_value += ''
            if when_value != "":
                top_buffer += ''
            else:
                top_buffer += '1'
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_102(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 75, '\'jor\'', e)
            self.firstWord = -1

    # 'top'
    def gotResults_50(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{ctrl+home}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_50(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 80, '\'top\'', e)
            self.firstWord = -1

    # ('bot' | 'bottom')
    def gotResults_51(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{ctrl+end}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_51(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 81, '(\'bot\' | \'bottom\')', e)
            self.firstWord = -1

    # ('train from add word' | 'word train')
    def gotResults_52(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{alt+a}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += 'r'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '2500'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += 's'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_52(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 82, '(\'train from add word\' | \'word train\')', e)
            self.firstWord = -1

    # ('train from vocab' | 'cab train')
    def gotResults_53(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{alt+t}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '500'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '500'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += '{alt+r}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '2500'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += 's'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_53(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 83, '(\'train from vocab\' | \'cab train\')', e)
            self.firstWord = -1

    # 'Vocab that'
    def gotResults_54(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += 'copy'
            dragon_arg2 = ''
            dragon_arg2 += 'that'
            saved_firstWord = self.firstWord
            call_Dragon('HeardWord', 'ssssssss', [dragon_arg1, dragon_arg2])
            self.firstWord = saved_firstWord
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += 'add'
            dragon_arg2 = ''
            dragon_arg2 += 'word'
            saved_firstWord = self.firstWord
            call_Dragon('HeardWord', 'ssssssss', [dragon_arg1, dragon_arg2])
            self.firstWord = saved_firstWord
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += '{ctrl+v}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += '{alt+a}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '500'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += 'r'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '5000'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += 's'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_54(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 101, '\'Vocab that\'', e)
            self.firstWord = -1

    # 'Paste Here'
    def gotResults_55(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '1'
            dragon_arg2 = ''
            dragon_arg2 += '1'
            saved_firstWord = self.firstWord
            call_Dragon('ButtonClick', 'ii', [dragon_arg1, dragon_arg2])
            self.firstWord = saved_firstWord
            top_buffer += '{Ctrl+v}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_55(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 103, '\'Paste Here\'', e)
            self.firstWord = -1

    # 'start pycharm'
    def gotResults_56(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            unimacro_arg1 = ''
            unimacro_arg1 += 'BRINGUP '
            unimacro_arg1 += 'C:\\Program Files\\JetBrains\\PyCharm Community Edition 2018.2.1\\bin\\pycharm64.exe'
            call_Unimacro(unimacro_arg1)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_56(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 106, '\'start pycharm\'', e)
            self.firstWord = -1

    # 'powershell'
    def gotResults_57(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            unimacro_arg1 = ''
            unimacro_arg1 += 'WINKEY '
            unimacro_arg1 += 'x'
            call_Unimacro(unimacro_arg1)
            top_buffer += 'i'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_57(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 113, '\'powershell\'', e)
            self.firstWord = -1

    # ('powershell admin' | 'power add')
    def gotResults_58(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            unimacro_arg1 = ''
            unimacro_arg1 += 'WINKEY '
            unimacro_arg1 += 'x'
            call_Unimacro(unimacro_arg1)
            top_buffer += 'a'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_58(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 115, '(\'powershell admin\' | \'power add\')', e)
            self.firstWord = -1

    # 'start KB'
    def gotResults_59(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            unimacro_arg1 = ''
            unimacro_arg1 += 'BRINGUP '
            unimacro_arg1 += 'C:\\Program Files (x86)\\KnowBrainer\\KnowBrainer Professional 2017\\KBPro.exe'
            call_Unimacro(unimacro_arg1)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_59(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 117, '\'start KB\'', e)
            self.firstWord = -1

    # 'kill KB'
    def gotResults_60(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'taskkill /F /T /IM KBPro.exe'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_60(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 119, '\'kill KB\'', e)
            self.firstWord = -1

    # 'diper'
    def gotResults_61(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            unimacro_arg1 = ''
            unimacro_arg1 += 'HW '
            unimacro_arg1 += 'start'
            unimacro_arg1 += 'settings'
            call_Unimacro(unimacro_arg1)
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '5000'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += '{tab}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_61(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 126, '\'diper\'', e)
            self.firstWord = -1

    # 'tight'
    def gotResults_62(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            unimacro_arg1 = ''
            unimacro_arg1 += 'WINKEY '
            unimacro_arg1 += '4'
            call_Unimacro(unimacro_arg1)
            top_buffer = do_flush(False, top_buffer);
            unimacro_arg1 = ''
            unimacro_arg1 += 'WWT '
            unimacro_arg1 += 'Word*'
            call_Unimacro(unimacro_arg1)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_62(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 128, '\'tight\'', e)
            self.firstWord = -1

    # 'wink'
    def gotResults_63(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'WINKEY()'
            top_buffer += '{left}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_63(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 129, '\'wink\'', e)
            self.firstWord = -1

    # 'bossman'
    def gotResults_64(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            unimacro_arg1 = ''
            unimacro_arg1 += 'WINKEY '
            unimacro_arg1 += '3'
            call_Unimacro(unimacro_arg1)
            top_buffer += '{down_5}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_64(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 130, '\'bossman\'', e)
            self.firstWord = -1

thisGrammar = ThisGrammar()
thisGrammar.initialize()

def unload():
    global thisGrammar
    if thisGrammar: thisGrammar.unload()
    thisGrammar = None
